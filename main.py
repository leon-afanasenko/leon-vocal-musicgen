import gradio as gr
from helpers import (
    log, list_audio_files, list_voice_files, delete_file, save_voice_to_voice_dir, get_filename_only
)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π
log("üöÄ Starting Leon Vibe Creator...")
log("üì¶ Loading AI models... (this may take 10-15 seconds)")

from music_workflow import (
    generate_music_workflow, generate_song_with_voice, generate_tts_voice
)

log("üéâ All models loaded! Ready to create music!")

with gr.Blocks(theme=gr.themes.Monochrome(), css=".square-textbox textarea { aspect-ratio: 1/1 !important; min-height:120px; }") as demo:
    gr.Markdown("""
<h1 style='font-family:sans-serif; letter-spacing:2px; color:#222; text-align:center;'>
  <span style="color:#f15a24;">L</span><span style="color:#ff6600;">e</span><span style="color:#ffb347;">o</span><span style="color:#ffcc00;">n</span>
  <span style="color:#f15a24;"> </span>
  <span style="color:#ff6600;">V</span><span style="color:#ffb347;">i</span><span style="color:#ffcc00;">b</span><span style="color:#f15a24;">e</span>
  <span style="color:#222;"> Creator </span>
  <span style="color:#f15a24;">b</span><span style="color:#ff6600;">y</span>
  <span style="color:#ffcc00;"> S</span><span style="color:#ffb347;">u</span><span style="color:#ff6600;">n</span><span style="color:#f15a24;">o</span>
  <span style="color:#ffcc00;">-</span>
  <span style="color:#f15a24;">s</span><span style="color:#ff6600;">—Ç</span><span style="color:#ffb347;">y</span><span style="color:#ffcc00;">l</span><span style="color:#f15a24;">e</span>
</h1>
""")
    
    with gr.Tab("Create Track"):
        gr.Markdown("### üéµ Create new music track")
        with gr.Row():
            prompt_input = gr.Textbox(label="Prompt (e.g.: happy jazz, lofi, etc.)", lines=2, elem_classes="square-textbox", value="lofi relaxing piano")
            with gr.Column():
                track_name_input = gr.Textbox(label="Track name", value="Leon_music", elem_classes="square-textbox")
                duration_input = gr.Slider(minimum=5, maximum=60, value=20, step=1, label="Duration (sec)")
        
        generate_button = gr.Button("üéµ Generate Track", variant="primary", size="lg")
        
        status_generate = gr.Textbox(label="Status", value="Ready to generate", interactive=False)
        generated_audio_output = gr.Audio(label="Generated Track", type="filepath")

    with gr.Tab("File Manager"):
        gr.Markdown("### üìÇ Manage your files")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –∞ –Ω–µ –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏
        def get_audio_files_display():
            files = list_audio_files()
            return [(get_filename_only(f), f) for f in files]
        
        files_list_manage = gr.Dropdown(
            label="üìÅ Audio Files", 
            choices=get_audio_files_display(), 
            interactive=True
        )
        
        with gr.Row():
            play_button = gr.Button("‚ñ∂Ô∏è Play", variant="secondary")
            delete_button = gr.Button("üóëÔ∏è Delete", variant="stop")
        audio_player = gr.Audio(label="üéµ Player", type="filepath")

    with gr.Tab("Record Voice"):
        gr.Markdown("### üé§ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –≥–æ–ª–æ—Å")
        gr.Markdown("*–ó–∞–ø–∏—à–∏—Ç–µ —á–∏—Å—Ç—ã–π –≥–æ–ª–æ—Å –±–µ–∑ –º—É–∑—ã–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 10-30 —Å–µ–∫—É–Ω–¥.*")
        
        with gr.Tabs():
            with gr.Tab("üî¥ –ó–∞–ø–∏—Å–∞—Ç—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"):
                record_voice = gr.Audio(
                    label="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–ø–∏—Å–∏ –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ",
                    type="filepath",
                    source="microphone"
                )
                
            with gr.Tab("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"):
                upload_voice = gr.Audio(
                    label="–í—ã–±–µ—Ä–∏—Ç–µ .wav —Ñ–∞–π–ª —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º",
                    type="filepath",
                    source="upload"
                )
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        with gr.Row():
            with gr.Column(scale=2):
                voice_preview = gr.Audio(
                    label="üéß –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä", 
                    type="filepath",
                    visible=False
                )
                
            with gr.Column(scale=1):
                voice_info = gr.Textbox(
                    label="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", 
                    value="–ó–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≥–æ–ª–æ—Å",
                    interactive=False
                )
        
        with gr.Row():
            voice_name_input = gr.Textbox(
                label="üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú–æ–π –≥–æ–ª–æ—Å', 'Leon voice')",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                visible=False
            )
            
        with gr.Row():
            save_voice_btn = gr.Button(
                "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≥–æ–ª–æ—Å–æ–≤", 
                variant="primary",
                size="lg",
                visible=False
            )
            
        # –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
        current_voice_path = gr.Textbox(visible=False)
        
        # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        gr.Markdown("---")
        gr.Markdown("### üìö –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞")
        
        def get_voice_files_display():
            files = list_voice_files()
            return [(get_filename_only(f), f) for f in files]
        
        saved_voices_list = gr.Dropdown(
            label="üé§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞",
            choices=get_voice_files_display(),
            interactive=True
        )
        
        with gr.Row():
            refresh_voices_btn = gr.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", variant="secondary")
            play_saved_voice_btn = gr.Button("‚ñ∂Ô∏è –ü—Ä–æ—Å–ª—É—à–∞—Ç—å", variant="secondary")
            delete_voice_btn = gr.Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å", variant="stop")
            
        saved_voice_player = gr.Audio(label="üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞", type="filepath")

    with gr.Tab("Voice Synthesis"):
        gr.Markdown("### üó£Ô∏è –°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–∞")
        
        voice_selector = gr.Dropdown(
            label="üé§ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞",
            choices=get_voice_files_display(),
            interactive=True
        )
        
        lyrics_input = gr.Textbox(
            label="üìù –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞",
            lines=6,
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...\n\nShift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            max_lines=10
        )
        
        generate_tts_btn = gr.Button("üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å", variant="primary", size="lg")
        
        status_tts = gr.Textbox(label="üéôÔ∏è –°—Ç–∞—Ç—É—Å", value="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç", interactive=False)
        tts_result_audio = gr.Audio(label="üîä –†–µ–∑—É–ª—å—Ç–∞—Ç", type="filepath")

    with gr.Tab("Complete Song"):
        gr.Markdown("### üéµ –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é —Å –≥–æ–ª–æ—Å–æ–º")
        
        voice_selector_song = gr.Dropdown(
            label="üé§ –ì–æ–ª–æ—Å –¥–ª—è –ø–µ—Å–Ω–∏",
            choices=get_voice_files_display(),
            interactive=True
        )
        
        lyrics_song_input = gr.Textbox(
            label="üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏", 
            lines=8, 
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –ø–µ—Å–Ω–∏...\n\nShift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏",
            max_lines=15
        )
        
        with gr.Row():
            genre_input = gr.Dropdown(
                ["pop", "rock", "rap", "jazz", "lofi", "electronic"], 
                label="üé∏ –ñ–∞–Ω—Ä", 
                value="pop"
            )
            duration_input2 = gr.Slider(
                minimum=10, 
                maximum=60, 
                value=30, 
                step=1, 
                label="‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)"
            )
        
        generate_song_btn = gr.Button("üé¨ –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é", variant="primary", size="lg")
        
        status_song = gr.Textbox(label="üéº –°—Ç–∞—Ç—É—Å", value="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç", interactive=False)
        song_output = gr.Audio(label="üéä –ì–æ—Ç–æ–≤–∞—è –ø–µ—Å–Ω—è", type="filepath")

    # === –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò ===
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏/–∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–∞
    def handle_voice_input(record_file, upload_file):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –≥–æ–ª–æ—Å–∞"""
        current_file = upload_file if upload_file else record_file
        
        if current_file:
            return (
                current_file,  # voice_preview
                gr.update(visible=True),  # voice_preview visibility
                gr.update(visible=True, value="leon_voice"),  # voice_name_input
                gr.update(visible=True),  # save_voice_btn
                "‚úÖ –ì–æ–ª–æ—Å –∑–∞–≥—Ä—É–∂–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ",  # voice_info
                current_file  # current_voice_path
            )
        else:
            return (
                None,  # voice_preview
                gr.update(visible=False),  # voice_preview visibility  
                gr.update(visible=False),  # voice_name_input
                gr.update(visible=False),  # save_voice_btn
                "–ó–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≥–æ–ª–æ—Å",  # voice_info
                None  # current_voice_path
            )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    def save_voice_with_name(voice_path, voice_name):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ–ª–æ—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
        if not voice_path:
            return "‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", gr.update(), gr.update()
        
        if not voice_name or not voice_name.strip():
            return "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞", gr.update(), gr.update()
        
        try:
            saved_path = save_voice_to_voice_dir(voice_path, voice_name.strip())
            new_choices = get_voice_files_display()
            
            return (
                "‚úÖ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
                gr.update(choices=new_choices),
                gr.update(choices=new_choices)
            )
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", gr.update(), gr.update()
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    def on_generate_and_update(prompt, duration, track_name, progress=gr.Progress()):
        try:
            def update_status(percent, desc):
                progress(percent, desc=desc)
                return desc
                
            result = generate_music_workflow(prompt, duration, track_name, update_status)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            new_choices = get_audio_files_display()
            
            return result, gr.update(choices=new_choices), "‚úÖ –¢—Ä–µ–∫ —Å–æ–∑–¥–∞–Ω!"
        except Exception as e:
            return None, gr.update(), f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def on_generate_tts(lyrics, voice_path, progress=gr.Progress()):
        try:
            if not lyrics.strip():
                return None, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
            if not voice_path:
                return None, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å"
                
            def update_status(percent, desc):
                progress(percent, desc=desc)
                return desc
                
            result = generate_tts_voice(lyrics, voice_path, update_status)
            return result, "‚úÖ –ì–æ–ª–æ—Å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω!"
        except Exception as e:
            return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    def on_generate_song(lyrics, genre, duration, voice_path, progress=gr.Progress()):
        try:
            if not lyrics.strip():
                return None, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏"
            if not voice_path:
                return None, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å"
                
            def update_status(percent, desc):
                progress(percent, desc=desc)
                return desc
                
            result = generate_song_with_voice(lyrics, genre, duration, voice_path, update_status)
            return result, "‚úÖ –ü–µ—Å–Ω—è —Å–æ–∑–¥–∞–Ω–∞!"
        except Exception as e:
            return None, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏
    def refresh_voice_lists():
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å–ø–∏—Å–∫–∏ –≥–æ–ª–æ—Å–æ–≤"""
        new_choices = get_voice_files_display()
        return (
            gr.update(choices=new_choices),  # saved_voices_list
            gr.update(choices=new_choices),  # voice_selector
            gr.update(choices=new_choices)   # voice_selector_song
        )
    
    def refresh_audio_files():
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
        new_choices = get_audio_files_display()
        return gr.update(choices=new_choices)

    def on_delete_audio_file(filepath):
        """–£–¥–∞–ª—è–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        if filepath:
            delete_file(filepath)
        return refresh_audio_files()

    def on_delete_voice_file(filepath):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –≥–æ–ª–æ—Å–∞"""
        if filepath:
            delete_file(filepath)
        return refresh_voice_lists()

    # === –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô ===
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞
    record_voice.change(
        handle_voice_input,
        inputs=[record_voice, upload_voice],
        outputs=[voice_preview, voice_preview, voice_name_input, save_voice_btn, voice_info, current_voice_path]
    )
    
    upload_voice.change(
        handle_voice_input,
        inputs=[record_voice, upload_voice],
        outputs=[voice_preview, voice_preview, voice_name_input, save_voice_btn, voice_info, current_voice_path]
    )
    
    save_voice_btn.click(
        save_voice_with_name,
        inputs=[current_voice_path, voice_name_input],
        outputs=[voice_info, saved_voices_list, voice_selector]
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞–º–∏
    refresh_voices_btn.click(
        refresh_voice_lists,
        outputs=[saved_voices_list, voice_selector, voice_selector_song]
    )
    
    play_saved_voice_btn.click(
        lambda x: x,
        inputs=[saved_voices_list],
        outputs=[saved_voice_player]
    )
    
    delete_voice_btn.click(
        on_delete_voice_file,
        inputs=[saved_voices_list],
        outputs=[saved_voices_list, voice_selector, voice_selector_song]
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    generate_button.click(
        on_generate_and_update,
        inputs=[prompt_input, duration_input, track_name_input],
        outputs=[generated_audio_output, files_list_manage, status_generate]
    )
    
    generate_tts_btn.click(
        on_generate_tts,
        inputs=[lyrics_input, voice_selector],
        outputs=[tts_result_audio, status_tts]
    )
    
    generate_song_btn.click(
        on_generate_song,
        inputs=[lyrics_song_input, genre_input, duration_input2, voice_selector_song],
        outputs=[song_output, status_song]
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
    play_button.click(
        lambda p: p, 
        inputs=[files_list_manage], 
        outputs=[audio_player]
    )
    
    delete_button.click(
        on_delete_audio_file,
        inputs=[files_list_manage],
        outputs=[files_list_manage]
    )

if __name__ == "__main__":
    log("===> Interface loaded! Open in browser: http://127.0.0.1:7860")
    demo.queue()
    demo.launch()